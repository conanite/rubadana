require 'aduki'
require 'rubadana'

module SpecHelpers
  def date str ; Date.parse str ; end
end

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'
  config.include SpecHelpers
end

class Invoice < Aduki::Initializable
  attr_accessor :type, :date, :amount
end

class InvoiceMonth
  def name        ; "monthly"                                       ; end
  def map   thing ; Date.new(thing.date.year, thing.date.month, 1)  ; end # rails just use #beginning_of_month
  def label value ; value.strftime "%B %Y"                          ; end # better with I18n
end

class InvoiceYear
  def name        ; "yearly"                                        ; end
  def map   thing ; thing.date.year                                 ; end
  def label value ; value                                           ; end
end

class InvoiceType
  def name        ; "type"                                          ; end
  def map   thing ; thing.type                                      ; end
  def label value ; value.to_s                                      ; end
end

class InvoiceScale
  def name        ; "scale"                                         ; end
  def map   thing ; Math.log(thing.amount, 10).to_i                 ; end
  def label value ; value                                           ; end
end

class InvoiceAmount
  def name        ; :invoice_amount                                 ; end
  def map   thing ; thing.amount                                    ; end
  def label value ; value.to_s                                      ; end
end
